// Generated by CoffeeScript 1.6.3
(function() {
  var Pocket, extend, makeUrl, pocket, qs, request;

  qs = require('qs');

  request = require('request');

  Pocket = (function() {
    Pocket.prototype.apiHost = 'https://getpocket.com';

    Pocket.prototype.requestTokenUri = '/v3/oauth/request';

    Pocket.prototype.authorizeUri = '/auth/authorize';

    Pocket.prototype.accessTokenUri = '/v3/oauth/authorize';

    Pocket.prototype.retrieveUri = '/v3/get';

    Pocket.prototype.addUri = '/v3/add';

    Pocket.prototype.modifyUri = '/v3/send';

    Pocket.prototype.setAccessToken = function(token) {
      return this.access_token = token;
    };

    function Pocket(consumer_key, redirect_uri) {
      this.consumer_key = consumer_key;
      this.redirect_uri = redirect_uri;
      this.access_token = '';
    }

    Pocket.prototype.getUrl = function(apiType) {
      return "" + this.apiHost + this["" + apiType + "Uri"];
    };

    Pocket.prototype.getRequestTokenUrl = function() {
      return this.getUrl("requestToken");
    };

    Pocket.prototype.getAuthorizeUrl = function() {
      return this.getUrl("authorize");
    };

    Pocket.prototype.getAccessTokenUrl = function() {
      return this.getUrl("accessToken");
    };

    Pocket.prototype.get = function(conditions, callback) {
      var url;
      if (conditions == null) {
        conditions = {};
      }
      if (callback == null) {
        callback = function() {};
      }
      if (typeof conditions === 'function') {
        callback = conditions;
        conditions = {};
      }
      conditions = extend(conditions, this.baseParams);
      if (!conditions.access_token) {
        throw new Error("access_token is required");
      }
      url = makeUrl(this.getUrl('retrieve'), conditions);
      return request.get(url, function(err, resp, ret) {
        var e;
        try {
          return callback(err, JSON.parse(ret));
        } catch (_error) {
          e = _error;
          return callback(err, ret);
        }
      });
    };

    Pocket.prototype.add = function(data, callback) {
      if (callback == null) {
        callback = function() {};
      }
      data = extend(data, this.baseParams);
      return request.post({
        headers: {
          'content-type': 'application/x-www-form-urlencoded'
        },
        url: this.getUrl('add'),
        body: qs.stringify(data)
      }, function(err, resp, ret) {
        var e;
        try {
          return callback(err, JSON.parse(ret));
        } catch (_error) {
          e = _error;
          console.error(err, ret);
          return callback(null, {});
        }
      });
    };

    Pocket.prototype.send = function(actions, callback) {
      var url;
      if (callback == null) {
        callback = function() {};
      }
      url = makeUrl(this.getUrl('modify'), this.baseParams);
      url += '&actions=' + encodeURIComponent(JSON.stringify(actions));
      return request.get(url, function(err, resp, ret) {
        var e;
        try {
          return callback(err, JSON.parse(ret));
        } catch (_error) {
          e = _error;
          console.error(err, ret);
          return callback(null, {});
        }
      });
    };

    Pocket.prototype.__defineGetter__('baseParams', function() {
      var d;
      d = {
        consumer_key: this.consumer_key
      };
      if (this.access_token) {
        d.access_token = this.access_token;
      }
      return d;
    });

    return Pocket;

  })();

  makeUrl = function(prefix, query) {
    if (typeof query !== 'string') {
      query = qs.stringify(query);
    }
    return "" + prefix + "?" + query;
  };

  extend = function(a, b) {
    var key, val;
    for (key in b) {
      val = b[key];
      a[key] = val;
    }
    return a;
  };

  pocket = new Pocket;

  pocket.Pocket = Pocket;

  pocket.init = function(consumer_key, redirect_uri) {
    if (!consumer_key) {
      throw new Error("consumer_key is required");
    }
    pocket.consumer_key = consumer_key;
    return pocket.redirect_uri = redirect_uri;
  };

  module.exports = pocket;

}).call(this);
